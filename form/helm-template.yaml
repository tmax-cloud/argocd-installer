## (()) 안의 값은 괄호를 포함하여 알맞은 값으로 치환해줘야 함
## ((module_name))을 모듈에 맞게 치환
## ((module ns))을 모듈이 사용할 namespace로 치환
## ((module_path))을 모듈의 manifest경로로 치환
{{- if .Values.modules.((module_name)).enabled }}
{{ $isMaster := eq .Values.global.cluster "master" }}
{{ $prefix := printf "%s-%s" .Values.global.clusterNamespace .Values.global.clusterName }}
{{ $module := "((module_name))" }}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  labels:
    cluster: {{ ternary "master" $prefix $isMaster }}
  name: {{ ternary $module (printf "%s-%s" $prefix $module) $isMaster }}
  namespace: argocd
spec:
  destination:
    name: {{ .Values.global.clusterName }}
    namespace: ((module ns))
  project: {{ .Values.spec.project }}
  source:
    ## 모든 모듈에서 폐쇄망 여부 및 private registry 주소는 필수로 가지고 있어야 함
    ## name의 경우 해당 모듈의 manifest에서 사용할 변수명으로 변경
    ## value의 경우 같은 values.yaml을 사용하기 때문에 변경할 필요가 없음
    ## 모듈 manifest가 jsonnet일 경우 작성방법
    directory:      
      jsonnet:
        tlas:
          - name: is_offline
            ## string이 아니면 에러가 나기 때문에 "" 지우면 안됨
            value: "{{ .Values.global.network.disabled }}"
          - name: private_registry
            value: {{ .Values.global.privateRegistry }}
    ## 모듈 manifest가 helm일 경우 작성방법
    helm:
      parameters:
        - name: global.registry.is_offline
          ## string이 아니면 에러가 나기 때문에 "" 지우면 안됨
          value: "{{ .Values.global.network.disabled }}"
        - name: global.registry.private_registry
          value: {{ .Values.global.privateRegistry }}
    path: ((module_path))
    repoURL: {{ .Values.spec.source.repoURL }}
    targetRevision: {{ .Values.spec.source.targetRevision }}
{{- end }}