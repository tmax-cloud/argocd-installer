apiVersion: v1
kind: Namespace
metadata:
  name: hyperauth
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hyperauth-admin
  namespace: hyperauth
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: hyperauth-admin
subjects:
- kind: ServiceAccount
  name: hyperauth-admin
  namespace: hyperauth
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Secret
metadata:
  name: passwords
  namespace: hyperauth
type: Opaque
data:
  CERTS_PASSWORD: dG1heEAyMw==
  HYPERAUTH_PASSWORD: YWRtaW4=
  HYPERAUTH_ADMIN: YWRtaW4=
  DB_PASSWORD: a2V5Y2xvYWs=
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: hyperauth-log-pvc
  namespace: hyperauth
  labels:
    hyperauth: log
spec:
  #storageClassName: csi-cephfs-sc
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
---
# Only needed Version After tmaxcloudck/hyperauth:b1.1.1.33
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: hyperauth-profile-picture
  namespace: hyperauth
  labels:
    app: hyperauth
spec:
  #storageClassName: csi-cephfs-sc
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: hyperauth
  labels:
    app: postgresql
spec:
  ports:
  - port: 5432
  selector:
    app: postgresql
    tier: postgreSQL
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: hyperauth
  namespace: hyperauth
  labels:
    app: keycloak
  annotations:
    traefik.ingress.kubernetes.io/service.sticky.cookie: "true"
    traefik.ingress.kubernetes.io/service.sticky.cookie.name: hyperauth
    traefik.ingress.kubernetes.io/service.sticky.cookie.secure: "true"
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: https
    port: 443
    targetPort: 8443
  selector:
    app: hyperauth
  type: ClusterIP   # ClusterIP or LoadBalancer or NodePort

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: tmax-realm-import-config
  namespace: hyperauth
data:
  tmax-realm.json: |
    {
      "id": "tmax",
      "realm": "tmax",
      "displayName": "tmax",
      "notBefore": 1642749441,
      "revokeRefreshToken": true,
      "refreshTokenMaxReuse": 2,
      "accessTokenLifespan": 3600,
      "accessTokenLifespanForImplicitFlow": 54000,
      "ssoSessionIdleTimeout": 1800,
      "ssoSessionMaxLifespan": 108000,
      "ssoSessionIdleTimeoutRememberMe": 0,
      "ssoSessionMaxLifespanRememberMe": 0,
      "offlineSessionIdleTimeout": 108000,
      "offlineSessionMaxLifespanEnabled": false,
      "offlineSessionMaxLifespan": 5184000,
      "clientSessionIdleTimeout": 0,
      "clientSessionMaxLifespan": 0,
      "clientOfflineSessionIdleTimeout": 0,
      "clientOfflineSessionMaxLifespan": 0,
      "accessCodeLifespan": 18000,
      "accessCodeLifespanUserAction": 18000,
      "accessCodeLifespanLogin": 18000,
      "actionTokenGeneratedByAdminLifespan": 43200,
      "actionTokenGeneratedByUserLifespan": 18000,
      "enabled": true,
      "sslRequired": "external",
      "registrationAllowed": true,
      "registrationEmailAsUsername": true,
      "rememberMe": true,
      "verifyEmail": true,
      "loginWithEmailAllowed": true,
      "duplicateEmailsAllowed": false,
      "resetPasswordAllowed": true,
      "editUsernameAllowed": false,
      "bruteForceProtected": true,
      "permanentLockout": false,
      "maxFailureWaitSeconds": 900,
      "minimumQuickLoginWaitSeconds": 60,
      "waitIncrementSeconds": 60,
      "quickLoginCheckMilliSeconds": 1000,
      "maxDeltaTimeSeconds": 43200,
      "failureFactor": 30,
      "roles": {
        "realm": [
          {
            "id": "946bea11-ad37-4e55-be03-631305ab5d15",
            "name": "hyperauth tmax realm all role",
            "composite": true,
            "composites": {
              "client": {
                "realm-management": [
                  "query-users",
                  "query-realms",
                  "view-identity-providers",
                  "view-events",
                  "manage-identity-providers",
                  "impersonation",
                  "manage-users",
                  "query-groups",
                  "create-client",
                  "manage-authorization",
                  "manage-realm",
                  "manage-events",
                  "realm-admin",
                  "query-clients",
                  "manage-clients",
                  "view-realm",
                  "view-clients",
                  "view-authorization",
                  "view-users"
                ]
              }
            },
            "clientRole": false,
            "containerId": "tmax",
            "attributes": {}
          },
          {
            "id": "5a288393-f708-4c69-8749-72b27f54f833",
            "name": "hyperauth tmax realm user all role",
            "composite": false,
            "clientRole": false,
            "containerId": "tmax",
            "attributes": {}
          },
          {
            "id": "b4b5f522-f1dc-4c64-9680-afca8a4d1b6b",
            "name": "all_access",
            "description": "kibana all_access",
            "composite": false,
            "clientRole": false,
            "containerId": "tmax",
            "attributes": {}
          },
          {
            "id": "2f006807-9f06-41cd-8c27-ebecc0e84866",
            "name": "uma_authorization",
            "description": "${role_uma_authorization}",
            "composite": false,
            "clientRole": false,
            "containerId": "tmax",
            "attributes": {}
          },
          {
            "id": "2a42e96c-bba1-44f9-8105-ca95d205b247",
            "name": "offline_access",
            "description": "${role_offline-access}",
            "composite": false,
            "clientRole": false,
            "containerId": "tmax",
            "attributes": {}
          },
          {
            "id": "f66f3042-e449-4ddd-948b-0c0a6083fe03",
            "name": "admin",
            "description": "kibana admin",
            "composite": false,
            "clientRole": false,
            "containerId": "tmax",
            "attributes": {}
          }
        ],
        "client": {
          "realm-management": [
            {
              "id": "448e91ad-40b6-4cdb-ae31-487c4b079587",
              "name": "query-users",
              "description": "${role_query-users}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "597a1318-6370-4a43-8329-b9ebc8e4b287",
              "name": "query-realms",
              "description": "${role_query-realms}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "093cf401-e1d5-448e-b607-dc9e91d57952",
              "name": "view-identity-providers",
              "description": "${role_view-identity-providers}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "c545b591-d7e8-40fc-b1b0-8f138d87f131",
              "name": "view-events",
              "description": "${role_view-events}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "da7af754-b64f-437e-88d4-c73d0d86030f",
              "name": "manage-identity-providers",
              "description": "${role_manage-identity-providers}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "89bd2a2c-278c-4422-b8e1-25315a5b61f1",
              "name": "impersonation",
              "description": "${role_impersonation}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "fde27778-aeb7-4557-8a54-263c0b84f3e8",
              "name": "manage-users",
              "description": "${role_manage-users}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "0898ae8f-892d-4276-aebe-2da27e815a71",
              "name": "query-groups",
              "description": "${role_query-groups}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "1bfedcdd-168b-4d2f-a5b7-0751c6c60a2c",
              "name": "create-client",
              "description": "${role_create-client}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "98aca6de-9af4-4247-b5a3-f83eea7b60cf",
              "name": "manage-authorization",
              "description": "${role_manage-authorization}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "cf9bdca6-9251-4688-b356-dbed94f2ac8f",
              "name": "manage-realm",
              "description": "${role_manage-realm}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "b4637c65-7422-444f-8001-50ff93245a52",
              "name": "manage-events",
              "description": "${role_manage-events}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "e80743da-72a6-4f6f-8cf5-7e97f6a18fb9",
              "name": "realm-admin",
              "description": "${role_realm-admin}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "query-users",
                    "query-realms",
                    "view-identity-providers",
                    "view-events",
                    "manage-identity-providers",
                    "impersonation",
                    "manage-users",
                    "query-groups",
                    "create-client",
                    "manage-authorization",
                    "manage-realm",
                    "manage-events",
                    "query-clients",
                    "manage-clients",
                    "view-realm",
                    "view-clients",
                    "view-authorization",
                    "view-users"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "a928296b-bf4c-44df-af8a-d1a0daf12a8f",
              "name": "query-clients",
              "description": "${role_query-clients}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "6724cb4a-b72d-4a88-8fa9-1665650c12f4",
              "name": "manage-clients",
              "description": "${role_manage-clients}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "2a2b11c4-238a-4666-859e-97464d00b292",
              "name": "view-realm",
              "description": "${role_view-realm}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "23d633db-7647-47ae-8495-005abbbb066b",
              "name": "view-clients",
              "description": "${role_view-clients}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "query-clients"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "24e24906-e88e-4979-bcf8-42aaa0ca74bb",
              "name": "view-authorization",
              "description": "${role_view-authorization}",
              "composite": false,
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            },
            {
              "id": "70d51d17-50c1-4fd7-9797-02e8d3cff115",
              "name": "view-users",
              "description": "${role_view-users}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "query-users",
                    "query-groups"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
              "attributes": {}
            }
          ],
          "hyperregistry": [],
          "security-admin-console": [],
          "argocd": [],
          "account-console": [],
          "broker": [
            {
              "id": "f5bd33cc-bb9c-4e00-9f95-826a0555b2bd",
              "name": "read-token",
              "description": "${role_read-token}",
              "composite": false,
              "clientRole": true,
              "containerId": "e6d237b2-31b9-4993-9c33-02178a11f28a",
              "attributes": {}
            }
          ],
          "hypercloud5": [],
          "jaeger": [
            {
              "id": "dd61d4dd-5958-4802-87f4-810d786efb35",
              "name": "uma_protection",
              "composite": false,
              "clientRole": true,
              "containerId": "5b3bf957-d015-412a-aa53-c4a9298b15bc",
              "attributes": {}
            },
            {
              "id": "f12a2bd4-4d18-439d-a8a3-a92c6033d9b2",
              "name": "jaeger-manager",
              "description": "jaeger-manger for accessing jaeger via api-gateway",
              "composite": false,
              "clientRole": true,
              "containerId": "5b3bf957-d015-412a-aa53-c4a9298b15bc",
              "attributes": {}
            }
          ],
          "grafana": [
            {
              "id": "a968e141-9ee0-40bb-8a59-c89c32258a92",
              "name": "uma_protection",
              "composite": false,
              "clientRole": true,
              "containerId": "6e693f32-07ef-4671-a33f-4baaabcc3ec5",
              "attributes": {}
            }
          ],
          "kiali": [
            {
              "id": "147dcb27-5d59-4927-be36-77487df4ea80",
              "name": "uma_protection",
              "composite": false,
              "clientRole": true,
              "containerId": "dab4db22-92f4-4051-9c60-c37bb08ba69e",
              "attributes": {}
            }
          ],
          "opensearch": [
            {
              "id": "599d7d05-decd-48b2-97c7-5c7dadc5d3a9",
              "name": "opensearch-admin",
              "composite": false,
              "clientRole": true,
              "containerId": "e6c53d6c-4cba-4167-bf0d-1c34471df723",
              "attributes": {}
            }
          ],
          "admin-cli": [],
          "notebook-gatekeeper": [
            {
              "id": "34add55f-7141-4225-b864-2c8ac9bd1848",
              "name": "notebook-gatekeeper-manager",
              "description": "notebook-gatekeeper-manager",
              "composite": false,
              "clientRole": true,
              "containerId": "d1c99fe1-54ab-44c8-9f25-ff16713a6bd5",
              "attributes": {}
            }
          ],
          "gitlab": [],
          "kibana": [
            {
              "id": "292ee968-8553-44b9-94f4-a87c9a00396e",
              "name": "uma_protection",
              "composite": false,
              "clientRole": true,
              "containerId": "37955f07-cc97-4828-8a93-72fba084795b",
              "attributes": {}
            },
            {
              "id": "90db8999-1107-47bc-b868-6f5bb0b5a16a",
              "name": "kibana-manager",
              "composite": false,
              "clientRole": true,
              "containerId": "37955f07-cc97-4828-8a93-72fba084795b",
              "attributes": {}
            }
          ],
          "account": [
            {
              "id": "377303cb-e84e-4e7a-ab63-6fd28623346e",
              "name": "view-consent",
              "description": "${role_view-consent}",
              "composite": false,
              "clientRole": true,
              "containerId": "5c3cb534-deb7-4db4-9465-a670ebc1efb4",
              "attributes": {}
            },
            {
              "id": "f6330053-91cf-42b4-8593-39b1ef65fad9",
              "name": "manage-account",
              "description": "${role_manage-account}",
              "composite": true,
              "composites": {
                "client": {
                  "account": [
                    "manage-account-links"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "5c3cb534-deb7-4db4-9465-a670ebc1efb4",
              "attributes": {}
            },
            {
              "id": "b84e041d-81bc-49a1-a7be-5e71f156d1a5",
              "name": "manage-account-links",
              "description": "${role_manage-account-links}",
              "composite": false,
              "clientRole": true,
              "containerId": "5c3cb534-deb7-4db4-9465-a670ebc1efb4",
              "attributes": {}
            },
            {
              "id": "1804b94c-60a3-4a94-9283-3b98cb288622",
              "name": "view-applications",
              "description": "${role_view-applications}",
              "composite": false,
              "clientRole": true,
              "containerId": "5c3cb534-deb7-4db4-9465-a670ebc1efb4",
              "attributes": {}
            },
            {
              "id": "51afb947-e429-42d2-8a71-df2fc2964b9e",
              "name": "view-profile",
              "description": "${role_view-profile}",
              "composite": false,
              "clientRole": true,
              "containerId": "5c3cb534-deb7-4db4-9465-a670ebc1efb4",
              "attributes": {}
            },
            {
              "id": "5bc150ca-c365-45f6-80bb-53fadabbe1be",
              "name": "manage-consent",
              "description": "${role_manage-consent}",
              "composite": true,
              "composites": {
                "client": {
                  "account": [
                    "view-consent"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "5c3cb534-deb7-4db4-9465-a670ebc1efb4",
              "attributes": {}
            }
          ]
        }
      },
      "groups": [
        {
          "id": "a396e6f3-8e55-4d64-ac00-83d70f492db8",
          "name": "argocd-admin",
          "path": "/argocd-admin",
          "attributes": {},
          "realmRoles": [],
          "clientRoles": {},
          "subGroups": []
        },
        {
          "id": "93709e84-82aa-4ee4-ba7f-4c667522dcb2",
          "name": "hypercloud5",
          "path": "/hypercloud5",
          "attributes": {},
          "realmRoles": [
            "all_access",
            "uma_authorization",
            "offline_access"
          ],
          "clientRoles": {},
          "subGroups": []
        }
      ],
      "defaultRoles": [
        "uma_authorization",
        "offline_access"
      ],
      "defaultGroups": [
        "/hypercloud5"
      ],
      "requiredCredentials": [
        "password"
      ],
      "otpPolicyType": "totp",
      "otpPolicyAlgorithm": "HmacSHA1",
      "otpPolicyInitialCounter": 0,
      "otpPolicyDigits": 6,
      "otpPolicyLookAheadWindow": 1,
      "otpPolicyPeriod": 30,
      "otpSupportedApplications": [
        "FreeOTP",
        "Google Authenticator"
      ],
      "webAuthnPolicyRpEntityName": "keycloak",
      "webAuthnPolicySignatureAlgorithms": [
        "ES256"
      ],
      "webAuthnPolicyRpId": "",
      "webAuthnPolicyAttestationConveyancePreference": "not specified",
      "webAuthnPolicyAuthenticatorAttachment": "not specified",
      "webAuthnPolicyRequireResidentKey": "not specified",
      "webAuthnPolicyUserVerificationRequirement": "not specified",
      "webAuthnPolicyCreateTimeout": 0,
      "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
      "webAuthnPolicyAcceptableAaguids": [],
      "webAuthnPolicyPasswordlessRpEntityName": "hyperauth",
      "webAuthnPolicyPasswordlessSignatureAlgorithms": [
        "ES256",
        "ES384",
        "ES512",
        "RS256",
        "RS384",
        "RS512",
        "RS1"
      ],
      "webAuthnPolicyPasswordlessRpId": "",
      "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
      "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
      "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
      "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
      "webAuthnPolicyPasswordlessCreateTimeout": 0,
      "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
      "webAuthnPolicyPasswordlessAcceptableAaguids": [],
      "users": [
        {
          "id" : "36635ae7-fa27-4399-842a-e044f1a4a6a4",
          "username" : "hc-admin@tmax.co.kr",
          "enabled" : true,
          "totp" : false,
          "emailVerified" : true,
          "email" : "hc-admin@tmax.co.kr",
          "attributes" : {
            "lastPasswordUpdateTime" : [ "1643953675016" ]
          },
          "credentials" : [ {
            "id" : "1455bc09-78b7-461f-8deb-b78810c3fc78",
            "type" : "password",
            "createdDate" : 1643953675008,
            "secretData" : "{\"value\":\"LXZUPqifjsYk5wIj61Kh3dhJcvVAMCkeKEIqN16BB3VthZmWiz/SyOvYC+QcY7TluVnbkd1DGVHbGVJPhfCE4w==\",\"salt\":\"nu+LFEu2kV/ZlKwtj2PYyw==\"}",
            "credentialData" : "{\"hashIterations\":27500,\"algorithm\":\"pbkdf2-sha256\"}"
          } ],
          "disableableCredentialTypes" : [ ],
          "requiredActions" : [ ],
          "realmRoles" : [ "admin" ],
          "clientRoles" : {
            "opensearch" : [ "opensearch-admin" ],
            "notebook-gatekeeper" : [ "notebook-gatekeeper-manager" ],
            "kibana" : [ "kibana-manager" ],
            "account" : [ "manage-account", "view-profile" ],
            "jaeger" : [ "jaeger-manager" ]
          },
          "clientConsents" : [ {
            "clientId" : "kiali",
            "grantedClientScopes" : [ "profile", "group", "email", "user_name", "kiali", "roles" ],
            "createdDate" : 1643953191260,
            "lastUpdatedDate" : 1643953191276
          } ],
          "notBefore" : 0,
          "groups" : [ "/argocd-admin", "/hypercloud5" ]
        },
        {
          "id": "3fc4854d-a416-48fc-bd54-dfa6f92be66a",
          "createdTimestamp": 1636954461156,
          "username": "service-account-kiali",
          "enabled": true,
          "totp": false,
          "emailVerified": false,
          "serviceAccountClientId": "kiali",
          "disableableCredentialTypes": [],
          "requiredActions": [
            "VERIFY_EMAIL"
          ],
          "realmRoles": [
            "uma_authorization",
            "offline_access"
          ],
          "clientRoles": {
            "kiali": [
              "uma_protection"
            ],
            "account": [
              "manage-account",
              "view-profile"
            ]
          },
          "notBefore": 0,
          "groups": [
            "/hypercloud5"
          ]
        },
        {
          "id": "3980bd42-ce7e-46ae-a17d-f10730533a10",
          "createdTimestamp": 1638249579669,
          "username": "service-account-kibana",
          "enabled": true,
          "totp": false,
          "emailVerified": false,
          "serviceAccountClientId": "kibana",
          "disableableCredentialTypes": [],
          "requiredActions": [
            "VERIFY_EMAIL"
          ],
          "realmRoles": [
            "uma_authorization",
            "offline_access"
          ],
          "clientRoles": {
            "kibana": [
              "uma_protection"
            ],
            "account": [
              "manage-account",
              "view-profile"
            ]
          },
          "notBefore": 0,
          "groups": [
            "/hypercloud5"
          ]
        }
      ],
      "scopeMappings": [
        {
          "clientScope": "offline_access",
          "roles": [
            "offline_access"
          ]
        }
      ],
      "clientScopeMappings": {
        "account": [
          {
            "client": "account-console",
            "roles": [
              "manage-account"
            ]
          }
        ]
      },
      "clients": [
        {
          "id": "5c3cb534-deb7-4db4-9465-a670ebc1efb4",
          "clientId": "account",
          "name": "${client_account}",
          "rootUrl": "${authBaseUrl}",
          "baseUrl": "/realms/tmax/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "defaultRoles": [
            "manage-account",
            "view-profile"
          ],
          "redirectUris": [
            "/realms/tmax/account/*",
            "*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.multivalued.roles": "false",
            "saml.force.post.binding": "false",
            "saml.encrypt": "false",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "consent.screen.text": "jhjjjjjjjjjj",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "true",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "fbdba630-2aa6-4614-91ac-a7159e26ef22",
              "name": "docker-v2-allow-all-mapper",
              "protocol": "docker-v2",
              "protocolMapper": "docker-v2-allow-all-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "84a59c43-1f6c-4c1c-bb07-2756039cf245",
          "clientId": "account-console",
          "name": "${client_account-console}",
          "rootUrl": "${authBaseUrl}",
          "baseUrl": "/realms/tmax/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [
            "/realms/tmax/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.multivalued.roles": "false",
            "saml.force.post.binding": "false",
            "saml.encrypt": "false",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "true",
            "pkce.code.challenge.method": "S256",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "b4c1552d-e634-4e53-b81d-3c08e9be490b",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "31357913-b6b1-45cd-8027-e5fabe700ab0",
          "clientId": "admin-cli",
          "name": "${client_admin-cli}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "61bfd756-6069-45f8-bdfb-b31cd9bfce64",
              "name": "docker-v2-allow-all-mapper",
              "protocol": "docker-v2",
              "protocolMapper": "docker-v2-allow-all-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "61a9cae7-0f45-4e02-af51-5f6a317ee31a",
          "clientId": "argocd",
          "rootUrl": "",
          "adminUrl": "",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [
            "*"
          ],
          "webOrigins": [
            ""
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.multivalued.roles": "false",
            "saml.force.post.binding": "false",
            "saml.encrypt": "false",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "4dc12c61-e5f9-483b-9959-b30fe9d5767a",
              "name": "docker-v2-allow-all-mapper",
              "protocol": "docker-v2",
              "protocolMapper": "docker-v2-allow-all-mapper",
              "consentRequired": false,
              "config": {}
            },
            {
              "id": "e62cc48e-b52b-471e-8a96-7fa8ee160d98",
              "name": "argocd",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-mapper",
              "consentRequired": false,
              "config": {
                "included.client.audience": "argocd",
                "id.token.claim": "false",
                "access.token.claim": "true",
                "userinfo.token.claim": "false"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "user_name",
            "profile",
            "roles",
            "groups",
            "email",
            "group"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "e6d237b2-31b9-4993-9c33-02178a11f28a",
          "clientId": "broker",
          "name": "${client_broker}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "c6a0801d-d7b7-46d3-a10e-b10273e3d758",
              "name": "docker-v2-allow-all-mapper",
              "protocol": "docker-v2",
              "protocolMapper": "docker-v2-allow-all-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "64528cd4-587d-4fce-9c1e-3b39157040ef",
          "clientId": "gitlab",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [
            "",
            "*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.multivalued.roles": "false",
            "saml.force.post.binding": "false",
            "saml.encrypt": "false",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "1bda9b62-4c43-43bb-bea4-fed9255c5a88",
              "name": "docker-v2-allow-all-mapper",
              "protocol": "docker-v2",
              "protocolMapper": "docker-v2-allow-all-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "user_name",
            "profile",
            "roles",
            "email",
            "group"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "6e693f32-07ef-4671-a33f-4baaabcc3ec5",
          "clientId": "grafana",
          "rootUrl": "",
          "adminUrl": "",
          "baseUrl": "",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [
            "*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.multivalued.roles": "false",
            "saml.force.post.binding": "false",
            "saml.encrypt": "false",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "640eaba8-4847-4345-9a11-ef3f720f75ee",
              "name": "docker-v2-allow-all-mapper",
              "protocol": "docker-v2",
              "protocolMapper": "docker-v2-allow-all-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "user_name",
            "profile",
            "roles",
            "email",
            "group"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "5cc0c3df-8287-4819-ad71-9ad534d6250a",
          "clientId": "hypercloud5",
          "rootUrl": "",
          "adminUrl": "",
          "baseUrl": "/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [
            "*"
          ],
          "webOrigins": [
            "*"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.multivalued.roles": "false",
            "saml.force.post.binding": "false",
            "saml.encrypt": "false",
            "login_theme": "hypercloud",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "fc7d7965-ba3e-4d59-806d-97bbd65422e7",
              "name": "docker-v2-allow-all-mapper",
              "protocol": "docker-v2",
              "protocolMapper": "docker-v2-allow-all-mapper",
              "consentRequired": false,
              "config": {}
            },
            {
              "id": "48c94501-f1b3-4278-8f5e-7c5d5a23780b",
              "name": "groups",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-group-membership-mapper",
              "consentRequired": false,
              "config": {
                "full.path": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "hypercloud5",
                "userinfo.token.claim": "true"
              }
            },
            {
              "id": "2fe55ccf-f926-4a84-ab94-a2d3914cbe49",
              "name": "hypercloud5",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-mapper",
              "consentRequired": false,
              "config": {
                "included.client.audience": "hypercloud5",
                "id.token.claim": "false",
                "access.token.claim": "true",
                "included.custom.audience": "hypercloud5",
                "userinfo.token.claim": "false"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "user_name",
            "profile",
            "roles",
            "email",
            "group"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "c46620e4-f8d7-453d-9302-646c682bb7a0",
          "clientId": "hyperregistry",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [
            "*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.multivalued.roles": "false",
            "saml.force.post.binding": "false",
            "saml.encrypt": "false",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "f80f58bf-bea0-4846-b783-ce581f37087f",
              "name": "docker-v2-allow-all-mapper",
              "protocol": "docker-v2",
              "protocolMapper": "docker-v2-allow-all-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "user_name",
            "profile",
            "roles",
            "email",
            "group"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "5b3bf957-d015-412a-aa53-c4a9298b15bc",
          "clientId": "jaeger",
          "rootUrl": "",
          "adminUrl": "",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [
            "*"
          ],
          "webOrigins": [
            ""
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.multivalued.roles": "false",
            "saml.force.post.binding": "false",
            "saml.encrypt": "false",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "ee84594c-adf1-4217-90d5-041b1fea3112",
              "name": "jaeger",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-mapper",
              "consentRequired": false,
              "config": {
                "included.client.audience": "jaeger",
                "id.token.claim": "false",
                "access.token.claim": "true",
                "userinfo.token.claim": "false"
              }
            },
            {
              "id": "5c286b16-5a1e-4cf3-8f17-8f7071b4fee8",
              "name": "docker-v2-allow-all-mapper",
              "protocol": "docker-v2",
              "protocolMapper": "docker-v2-allow-all-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "user_name",
            "profile",
            "roles",
            "email",
            "group"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "dab4db22-92f4-4051-9c60-c37bb08ba69e",
          "clientId": "kiali",
          "rootUrl": "",
          "adminUrl": "",
          "baseUrl": "/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [
            "",
            "*"
          ],
          "webOrigins": [
            ""
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": true,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": true,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.multivalued.roles": "false",
            "saml.force.post.binding": "false",
            "saml.encrypt": "false",
            "login_theme": "hypercloud",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "true",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "6d7098e7-b46b-473d-8728-ac9e0e44a307",
              "name": "docker-v2-allow-all-mapper",
              "protocol": "docker-v2",
              "protocolMapper": "docker-v2-allow-all-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "kubernetes",
            "role_list",
            "user_name",
            "profile",
            "roles",
            "email",
            "group"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "37955f07-cc97-4828-8a93-72fba084795b",
          "clientId": "kibana",
          "rootUrl": "",
          "adminUrl": "",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [
            "*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": true,
          "authorizationServicesEnabled": true,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.multivalued.roles": "false",
            "saml.force.post.binding": "false",
            "saml.encrypt": "false",
            "login_theme": "tmax",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "567ddff3-330d-4e68-9c55-883fd84ae550",
              "name": "kibana",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-mapper",
              "consentRequired": false,
              "config": {
                "included.client.audience": "kibana",
                "id.token.claim": "false",
                "access.token.claim": "true",
                "userinfo.token.claim": "false"
              }
            },
            {
              "id": "9768b0ab-bf36-4b89-9e98-6b5426d40be6",
              "name": "docker-v2-allow-all-mapper",
              "protocol": "docker-v2",
              "protocolMapper": "docker-v2-allow-all-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "user_name",
            "profile",
            "roles",
            "email",
            "group"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ],
          "authorizationSettings": {
            "allowRemoteResourceManagement": true,
            "policyEnforcementMode": "ENFORCING",
            "resources": [
              {
                "name": "Default Resource",
                "type": "urn:kibana:resources:default",
                "ownerManagedAccess": false,
                "attributes": {},
                "_id": "5af6d577-1352-4c1a-9931-4ddde19c7b38",
                "uris": [
                  "/*"
                ]
              }
            ],
            "policies": [
              {
                "id": "e85704bd-3721-4378-a0fd-e1f5247c295b",
                "name": "Default Policy",
                "description": "A policy that grants access only for users within this realm",
                "type": "js",
                "logic": "POSITIVE",
                "decisionStrategy": "AFFIRMATIVE",
                "config": {
                  "code": "// by default, grants any permission associated with this policy\n$evaluation.grant();\n"
                }
              },
              {
                "id": "ec82124c-fc7f-4899-8d37-f426676420b8",
                "name": "Default Permission",
                "description": "A permission that applies to the default resource type",
                "type": "resource",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "defaultResourceType": "urn:kibana:resources:default",
                  "applyPolicies": "[\"Default Policy\"]"
                }
              }
            ],
            "scopes": [],
            "decisionStrategy": "UNANIMOUS"
          }
        },
        {
          "id": "d1c99fe1-54ab-44c8-9f25-ff16713a6bd5",
          "clientId": "notebook-gatekeeper",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [
            "*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.multivalued.roles": "false",
            "saml.force.post.binding": "false",
            "saml.encrypt": "false",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "4ffc78b0-fe0e-489c-bc5f-5ad1629eec24",
              "name": "docker-v2-allow-all-mapper",
              "protocol": "docker-v2",
              "protocolMapper": "docker-v2-allow-all-mapper",
              "consentRequired": false,
              "config": {}
            },
            {
              "id": "502caeff-b593-4cd9-8f88-9e28b6f5cd2f",
              "name": "notebook-gatekeeper",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-mapper",
              "consentRequired": false,
              "config": {
                "included.client.audience": "notebook-gatekeeper",
                "id.token.claim": "false",
                "access.token.claim": "true",
                "userinfo.token.claim": "false"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "user_name",
            "profile",
            "roles",
            "email",
            "group"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "e6c53d6c-4cba-4167-bf0d-1c34471df723",
          "clientId": "opensearch",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [
            "*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.multivalued.roles": "false",
            "saml.force.post.binding": "false",
            "saml.encrypt": "false",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "a873ac7d-5c9f-4623-8c73-9768465bf2c5",
              "name": "client roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-client-role-mapper",
              "consentRequired": false,
              "config": {
                "multivalued": "true",
                "userinfo.token.claim": "true",
                "user.attribute": "foo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "roles",
                "jsonType.label": "String",
                "usermodel.clientRoleMapping.clientId": "opensearch"
              }
            },
            {
              "id": "b3dd87ab-07c6-4f00-b0fb-f94f715b29ae",
              "name": "docker-v2-allow-all-mapper",
              "protocol": "docker-v2",
              "protocolMapper": "docker-v2-allow-all-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "user_name",
            "profile",
            "roles",
            "email",
            "group"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "a6d165dc-2f16-4fcf-845c-6f667ab44a38",
          "clientId": "realm-management",
          "name": "${client_realm-management}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": true,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "efb39670-ddfb-498c-bc49-cde8dcc47cc2",
              "name": "docker-v2-allow-all-mapper",
              "protocol": "docker-v2",
              "protocolMapper": "docker-v2-allow-all-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "8e8d4e17-04a3-4ea9-a095-af5f6fad0f34",
          "clientId": "security-admin-console",
          "name": "${client_security-admin-console}",
          "rootUrl": "${authAdminUrl}",
          "baseUrl": "/admin/tmax/console/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "tmax_client_secret",
          "redirectUris": [
            "*",
            "/admin/tmax/console/*"
          ],
          "webOrigins": [
            "+"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.multivalued.roles": "false",
            "saml.force.post.binding": "false",
            "saml.encrypt": "false",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "pkce.code.challenge.method": "S256",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "56e6caae-4998-4fb7-a894-489f61a77bb6",
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        }
      ],
      "clientScopes": [
        {
          "id": "824524e2-eb6e-478e-aa54-eccdecd577dd",
          "name": "groups",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "id": "f787dc0e-d060-4e55-97ef-7f285662a15c",
              "name": "groups",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-group-membership-mapper",
              "consentRequired": false,
              "config": {
                "full.path": "false",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "groups",
                "userinfo.token.claim": "true"
              }
            }
          ]
        },
        {
          "id": "cbf4adae-b868-47d0-a739-fd7d8f0199bf",
          "name": "kibana",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "id": "05bf9ea2-2721-42ae-aff0-b6dcb8f4149e",
              "name": "kibana",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-mapper",
              "consentRequired": false,
              "config": {
                "included.client.audience": "kibana",
                "id.token.claim": "false",
                "access.token.claim": "true",
                "userinfo.token.claim": "false"
              }
            }
          ]
        },
        {
          "id": "ca13e0eb-9553-4bf3-80b4-e91b451d1f30",
          "name": "kubernetes",
          "description": "Must Add this for kubernetes Call",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "id": "a672058e-0646-415a-b5f4-e458071d252a",
              "name": "kiali-kubernetes",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-mapper",
              "consentRequired": false,
              "config": {
                "included.client.audience": "hypercloud5",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            }
          ]
        },
        {
          "id": "e5b08cf0-5649-4115-ab0b-0636b453686a",
          "name": "group",
          "description": "for group claim in token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "id": "9a25e10d-9eb8-416b-a027-669e5bce7ce8",
              "name": "group",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-group-membership-mapper",
              "consentRequired": false,
              "config": {
                "full.path": "false",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "group",
                "userinfo.token.claim": "true"
              }
            }
          ]
        },
        {
          "id": "850154bc-7303-4729-bef9-5526417cf12f",
          "name": "user_name",
          "description": "user_name attribute",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "id": "5089f80e-34a9-4946-8831-831b299af13b",
              "name": "user_name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "user_name",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "user_name",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "e09c81b4-481a-4f39-9fb9-654c14074ff6",
          "name": "microprofile-jwt",
          "description": "Microprofile - JWT built-in scope",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "a13b3b30-3b39-4ad9-9c00-2eb4c78a34f4",
              "name": "upn",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "upn",
                "jsonType.label": "String"
              }
            },
            {
              "id": "4af43318-4c2c-43a2-92ab-a08b3b960913",
              "name": "groups",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "multivalued": "true",
                "userinfo.token.claim": "true",
                "user.attribute": "foo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "groups",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "5c299808-41bb-4f21-a2f1-a19312b0908e",
          "name": "web-origins",
          "description": "OpenID Connect scope for add allowed web origins to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false",
            "consent.screen.text": ""
          },
          "protocolMappers": [
            {
              "id": "9a23b163-9dfe-440e-b106-2bb2e1bfc1c9",
              "name": "allowed web origins",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-allowed-origins-mapper",
              "consentRequired": false,
              "config": {}
            }
          ]
        },
        {
          "id": "5b65f748-a297-4e3b-8df9-aedf0b07290a",
          "name": "roles",
          "description": "OpenID Connect scope for add user roles to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${rolesScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "1fda7dde-f74f-47e8-9166-a2e2cac0f4b8",
              "name": "client roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-client-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "resource_access.${client_id}.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            },
            {
              "id": "c3898408-2820-45d7-9366-a395bc979231",
              "name": "realm roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "realm_access.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            },
            {
              "id": "ecc9b639-20ae-4f07-af31-84001db8b951",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ]
        },
        {
          "id": "c1976ab2-ca8f-44f7-b0b2-35e8de9ed9a0",
          "name": "phone",
          "description": "OpenID Connect built-in scope: phone",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${phoneScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "208498ab-c9f4-4d82-9a39-8f9a8bce21c7",
              "name": "phone number verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumberVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number_verified",
                "jsonType.label": "boolean"
              }
            },
            {
              "id": "427e84f7-ec1f-4aba-8adf-22eaf831a350",
              "name": "phone number",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumber",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "edd448e7-f6e4-45d1-978c-4d6efcd4a730",
          "name": "address",
          "description": "OpenID Connect built-in scope: address",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${addressScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "a5cc14d5-490a-4d6f-b973-8cee5821cd32",
              "name": "address",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-address-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute.formatted": "formatted",
                "user.attribute.country": "country",
                "user.attribute.postal_code": "postal_code",
                "userinfo.token.claim": "true",
                "user.attribute.street": "street",
                "id.token.claim": "true",
                "user.attribute.region": "region",
                "access.token.claim": "true",
                "user.attribute.locality": "locality"
              }
            }
          ]
        },
        {
          "id": "d6f9b1f1-e720-4f73-899d-23a24ba60699",
          "name": "email",
          "description": "OpenID Connect built-in scope: email",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${emailScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "15ec168c-d814-4e6d-a32d-65a27d348ff5",
              "name": "email verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "emailVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email_verified",
                "jsonType.label": "boolean"
              }
            },
            {
              "id": "42b2e120-4a39-4fd3-8ff8-47b1e8f1c301",
              "name": "email",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "email",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "9dea4141-c837-465e-a289-d44d5a0690df",
          "name": "profile",
          "description": "OpenID Connect built-in scope: profile",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${profileScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "2e0e0e55-c49d-447a-9d35-4760c6112221",
              "name": "family name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "lastName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "family_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "60d910ec-6391-4fb5-aae6-df933789666e",
              "name": "middle name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "middleName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "middle_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "84be247b-ab4b-4431-b7ac-6d60af2f856a",
              "name": "zoneinfo",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "zoneinfo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "zoneinfo",
                "jsonType.label": "String"
              }
            },
            {
              "id": "2d1b4239-afb0-45c8-89e5-c0013d061bd9",
              "name": "gender",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "gender",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "gender",
                "jsonType.label": "String"
              }
            },
            {
              "id": "9bae3bc5-c3d4-47d5-9c47-b387957d44ea",
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            },
            {
              "id": "7603d7b2-6f88-4ca4-99e9-929bfb732415",
              "name": "full name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-full-name-mapper",
              "consentRequired": false,
              "config": {
                "id.token.claim": "true",
                "access.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            },
            {
              "id": "49befdd0-2696-45f1-94da-8d51b5e5d302",
              "name": "picture",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "picture",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "picture",
                "jsonType.label": "String"
              }
            },
            {
              "id": "642ba70b-4344-48ed-b1f9-9fe9a6e98a8e",
              "name": "nickname",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "nickname",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "nickname",
                "jsonType.label": "String"
              }
            },
            {
              "id": "fff94a31-ee5b-4031-ad5f-34871ba38fe0",
              "name": "username",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "preferred_username",
                "jsonType.label": "String"
              }
            },
            {
              "id": "4824d002-6f99-4337-9997-cdf488b348e1",
              "name": "given name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "firstName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "given_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "47143baf-49bd-41a7-8521-c2ce7172684b",
              "name": "birthdate",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "birthdate",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "birthdate",
                "jsonType.label": "String"
              }
            },
            {
              "id": "cb3ba85d-44a2-47ad-b1db-b8a2f833a02e",
              "name": "website",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "website",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "website",
                "jsonType.label": "String"
              }
            },
            {
              "id": "5e72ace7-89b8-4482-9522-1e1d5a1f11d2",
              "name": "updated at",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "updatedAt",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "updated_at",
                "jsonType.label": "String"
              }
            },
            {
              "id": "ab0570f1-e21e-454f-a963-74af5a78ecef",
              "name": "profile",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "profile",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "profile",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "a52b4fc5-038e-4df7-bed1-09c4c2d07dda",
          "name": "role_list",
          "description": "SAML role list",
          "protocol": "saml",
          "attributes": {
            "consent.screen.text": "${samlRoleListScopeConsentText}",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "id": "310eb8c8-1e07-43b8-9d42-604061c3c162",
              "name": "role list",
              "protocol": "saml",
              "protocolMapper": "saml-role-list-mapper",
              "consentRequired": false,
              "config": {
                "single": "false",
                "attribute.nameformat": "Basic",
                "attribute.name": "Role"
              }
            }
          ]
        },
        {
          "id": "36ba7aa9-7efb-4095-be7a-151c8545da36",
          "name": "offline_access",
          "description": "OpenID Connect built-in scope: offline_access",
          "protocol": "openid-connect",
          "attributes": {
            "consent.screen.text": "${offlineAccessScopeConsentText}",
            "display.on.consent.screen": "true"
          }
        }
      ],
      "defaultDefaultClientScopes": [
        "role_list",
        "profile",
        "email",
        "roles",
        "web-origins",
        "group",
        "user_name"
      ],
      "defaultOptionalClientScopes": [
        "offline_access",
        "address",
        "phone",
        "microprofile-jwt"
      ],
      "browserSecurityHeaders": {
        "contentSecurityPolicyReportOnly": "",
        "xContentTypeOptions": "nosniff",
        "xRobotsTag": "none",
        "xFrameOptions": "SAMEORIGIN",
        "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
        "xXSSProtection": "1; mode=block",
        "strictTransportSecurity": "max-age=31536000; includeSubDomains"
      },
      "smtpServer": {
        "password": "**********",
        "starttls": "false",
        "auth": "true",
        "port": "587",
        "host": "smtp.naver.com",
        "from": "dnxorjs1@naver.com",
        "fromDisplayName": "TMAX CLOUD",
        "ssl": "",
        "user": "dnxorjs1@naver.com"
      },
      "loginTheme": "tmax",
      "accountTheme": "tmax",
      "adminTheme": "tmax",
      "emailTheme": "tmax",
      "eventsEnabled": true,
      "eventsListeners": [
        "kafka_producer",
        "jboss-logging",
        "hyperauth_event_listener"
      ],
      "enabledEventTypes": [
        "UPDATE_CONSENT_ERROR",
        "SEND_RESET_PASSWORD",
        "GRANT_CONSENT",
        "UPDATE_TOTP",
        "REMOVE_TOTP",
        "REVOKE_GRANT",
        "LOGIN_ERROR",
        "CLIENT_LOGIN",
        "RESET_PASSWORD_ERROR",
        "IMPERSONATE_ERROR",
        "CODE_TO_TOKEN_ERROR",
        "CUSTOM_REQUIRED_ACTION",
        "RESTART_AUTHENTICATION",
        "UPDATE_PROFILE_ERROR",
        "IMPERSONATE",
        "LOGIN",
        "UPDATE_PASSWORD_ERROR",
        "CLIENT_INITIATED_ACCOUNT_LINKING",
        "TOKEN_EXCHANGE",
        "REGISTER",
        "LOGOUT",
        "CLIENT_REGISTER",
        "IDENTITY_PROVIDER_LINK_ACCOUNT",
        "UPDATE_PASSWORD",
        "FEDERATED_IDENTITY_LINK_ERROR",
        "CLIENT_DELETE",
        "IDENTITY_PROVIDER_FIRST_LOGIN",
        "VERIFY_EMAIL",
        "CLIENT_DELETE_ERROR",
        "CLIENT_LOGIN_ERROR",
        "RESTART_AUTHENTICATION_ERROR",
        "REMOVE_FEDERATED_IDENTITY_ERROR",
        "EXECUTE_ACTIONS",
        "TOKEN_EXCHANGE_ERROR",
        "PERMISSION_TOKEN",
        "SEND_IDENTITY_PROVIDER_LINK_ERROR",
        "EXECUTE_ACTION_TOKEN_ERROR",
        "SEND_VERIFY_EMAIL",
        "EXECUTE_ACTIONS_ERROR",
        "REMOVE_FEDERATED_IDENTITY",
        "IDENTITY_PROVIDER_POST_LOGIN",
        "IDENTITY_PROVIDER_LINK_ACCOUNT_ERROR",
        "UPDATE_EMAIL",
        "REGISTER_ERROR",
        "REVOKE_GRANT_ERROR",
        "LOGOUT_ERROR",
        "UPDATE_EMAIL_ERROR",
        "EXECUTE_ACTION_TOKEN",
        "CLIENT_UPDATE_ERROR",
        "UPDATE_PROFILE",
        "FEDERATED_IDENTITY_LINK",
        "CLIENT_REGISTER_ERROR",
        "SEND_VERIFY_EMAIL_ERROR",
        "SEND_IDENTITY_PROVIDER_LINK",
        "RESET_PASSWORD",
        "CLIENT_INITIATED_ACCOUNT_LINKING_ERROR",
        "UPDATE_CONSENT",
        "REMOVE_TOTP_ERROR",
        "VERIFY_EMAIL_ERROR",
        "SEND_RESET_PASSWORD_ERROR",
        "CLIENT_UPDATE",
        "IDENTITY_PROVIDER_POST_LOGIN_ERROR",
        "CUSTOM_REQUIRED_ACTION_ERROR",
        "UPDATE_TOTP_ERROR",
        "CODE_TO_TOKEN",
        "GRANT_CONSENT_ERROR",
        "IDENTITY_PROVIDER_FIRST_LOGIN_ERROR"
      ],
      "adminEventsEnabled": true,
      "adminEventsDetailsEnabled": false,
      "identityProviders": [
        {
          "alias": "kakao",
          "internalId": "76acf1b0-707d-4ae4-b311-406d42de4605",
          "providerId": "kakao",
          "enabled": true,
          "updateProfileFirstLoginMode": "on",
          "trustEmail": false,
          "storeToken": false,
          "addReadTokenRoleOnCreate": false,
          "authenticateByDefault": false,
          "linkOnly": false,
          "firstBrokerLoginFlowAlias": "first broker login with tmax policy",
          "postBrokerLoginFlowAlias": "post login for idP with tmax policies",
          "config": {
            "syncMode": "IMPORT",
            "clientSecret": "**********",
            "clientId": "509e0e7b08758d0bdbc64de18f0d3c18",
            "useJwksUrl": "true"
          }
        },
        {
          "alias": "naver",
          "internalId": "5ae237a9-d802-4fe5-9b22-aee19dfe4bd0",
          "providerId": "naver",
          "enabled": false,
          "updateProfileFirstLoginMode": "on",
          "trustEmail": false,
          "storeToken": false,
          "addReadTokenRoleOnCreate": false,
          "authenticateByDefault": false,
          "linkOnly": false,
          "firstBrokerLoginFlowAlias": "first broker login",
          "config": {
            "syncMode": "IMPORT",
            "clientSecret": "**********",
            "clientId": "asdf",
            "useJwksUrl": "true"
          }
        }
      ],
      "components": {
        "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
          {
            "id": "3bd671a3-359a-464c-9fae-81c762399e0a",
            "name": "Allowed Client Scopes",
            "providerId": "allowed-client-templates",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "allow-default-scopes": [
                "true"
              ]
            }
          },
          {
            "id": "aa2d4c92-d45f-4bfa-951d-832d522e1213",
            "name": "Allowed Protocol Mapper Types",
            "providerId": "allowed-protocol-mappers",
            "subType": "authenticated",
            "subComponents": {},
            "config": {
              "allowed-protocol-mapper-types": [
                "saml-user-attribute-mapper",
                "oidc-full-name-mapper",
                "oidc-address-mapper",
                "saml-user-property-mapper",
                "saml-role-list-mapper",
                "oidc-usermodel-attribute-mapper",
                "oidc-sha256-pairwise-sub-mapper",
                "oidc-usermodel-property-mapper"
              ]
            }
          },
          {
            "id": "aa46e927-c74f-4cc1-beec-038ecedcf324",
            "name": "Full Scope Disabled",
            "providerId": "scope",
            "subType": "anonymous",
            "subComponents": {},
            "config": {}
          },
          {
            "id": "835aa658-0eb9-4900-9b72-0ea46a90f041",
            "name": "Allowed Client Scopes",
            "providerId": "allowed-client-templates",
            "subType": "authenticated",
            "subComponents": {},
            "config": {
              "allow-default-scopes": [
                "true"
              ]
            }
          },
          {
            "id": "f21d0a8e-32e8-4270-a2fe-582332a256bb",
            "name": "Allowed Protocol Mapper Types",
            "providerId": "allowed-protocol-mappers",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "allowed-protocol-mapper-types": [
                "saml-user-attribute-mapper",
                "saml-user-property-mapper",
                "oidc-sha256-pairwise-sub-mapper",
                "saml-role-list-mapper",
                "oidc-usermodel-property-mapper",
                "oidc-address-mapper",
                "oidc-usermodel-attribute-mapper",
                "oidc-full-name-mapper"
              ]
            }
          },
          {
            "id": "70bd25da-a945-488f-8a86-58d812ead806",
            "name": "Trusted Hosts",
            "providerId": "trusted-hosts",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "host-sending-registration-request-must-match": [
                "true"
              ],
              "client-uris-must-match": [
                "true"
              ]
            }
          },
          {
            "id": "7e9f6925-fcac-43e0-85fd-6bee8f0d7b16",
            "name": "Consent Required",
            "providerId": "consent-required",
            "subType": "anonymous",
            "subComponents": {},
            "config": {}
          },
          {
            "id": "4f02221a-d8e3-4e7b-bd4a-3704a1dca9e8",
            "name": "Max Clients Limit",
            "providerId": "max-clients",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "max-clients": [
                "200"
              ]
            }
          }
        ],
        "org.keycloak.keys.KeyProvider": [
          {
            "id": "8b772d6c-96d0-469d-82bf-654ac2d55f58",
            "name": "hmac-generated",
            "providerId": "hmac-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ],
              "algorithm": [
                "HS256"
              ]
            }
          },
          {
            "id": "87c5baaf-a04a-4b41-b1c1-497dcda32397",
            "name": "aes-generated",
            "providerId": "aes-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ]
            }
          },
          {
            "id": "a3e7b09e-f2f3-4477-85f6-94fc86fe43a2",
            "name": "rsa-generated",
            "providerId": "rsa-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ]
            }
          }
        ]
      },
      "internationalizationEnabled": true,
      "supportedLocales": [
        "ko"
      ],
      "defaultLocale": "ko",
      "authenticationFlows": [
        {
          "id": "068ee631-443f-4c50-a471-5ca6e957ab39",
          "alias": "Account verification options",
          "description": "Method with which to verity the existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-email-verification",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "flowAlias": "Verify Existing Account by Re-authentication",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "dcd29fd1-c644-4611-88a1-cfed7eb38a15",
          "alias": "Authentication",
          "description": "",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "auth-password-form",
              "requirement": "ALTERNATIVE",
              "priority": 1,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "webauthn-authenticator-passwordless",
              "requirement": "ALTERNATIVE",
              "priority": 2,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "522bb121-370a-498c-9927-baf9f3a08686",
          "alias": "Authentication Options",
          "description": "Authentication options.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "basic-auth",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "basic-auth-otp",
              "requirement": "DISABLED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "auth-spnego",
              "requirement": "DISABLED",
              "priority": 30,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "16722759-8d76-4ab4-911d-df3a30996d13",
          "alias": "Browser - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "auth-otp-form",
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "60d02f3a-9f52-43a8-8321-20752950fa46",
          "alias": "Direct Grant - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "direct-grant-validate-otp",
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "4427effb-746b-4e22-81fd-ea9893c55feb",
          "alias": "First broker login - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "auth-otp-form",
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "98f9aab8-85f8-4711-b1d2-5bea8ff40708",
          "alias": "Handle Existing Account",
          "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-confirm-link",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "REQUIRED",
              "priority": 20,
              "flowAlias": "Account verification options",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "bfb46849-5921-4a28-a7c2-edb6c5f86fe4",
          "alias": "Post Login For idP With Tmax Policies",
          "description": "Username, password, otp and other auth forms.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "security-policy-authenticator",
              "requirement": "REQUIRED",
              "priority": 9,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "email-otp-authenticator",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "withdrawal-cancel-authenticator",
              "requirement": "REQUIRED",
              "priority": 12,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "password-update-alert-authenticator",
              "requirement": "REQUIRED",
              "priority": 13,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "4600fc16-9c03-492a-9410-6270815c43ab",
          "alias": "Reset - Conditional OTP",
          "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "reset-otp",
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "2577ebc5-8a85-483e-90fa-d1eaa504e7f3",
          "alias": "User creation or linking",
          "description": "Flow for the existing/non-existing user alternatives",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "create unique user config",
              "authenticator": "idp-create-user-if-unique",
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "flowAlias": "Handle Existing Account",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "1fba29c2-f3e8-4aa6-8219-e88979bdc6bc",
          "alias": "Verify Existing Account by Re-authentication",
          "description": "Reauthentication of existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-username-password-form",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "DISABLED",
              "priority": 20,
              "flowAlias": "First broker login - Conditional OTP",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "6f19b396-cf30-44fe-8e37-56f895d4fd8c",
          "alias": "browser",
          "description": "browser based authentication",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "auth-cookie",
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "auth-spnego",
              "requirement": "DISABLED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "identity-provider-redirector",
              "requirement": "ALTERNATIVE",
              "priority": 25,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "flowAlias": "forms",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "de30d056-f149-4845-bee5-5298cde71861",
          "alias": "browser tmax policies",
          "description": "browser based authentication",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "auth-cookie",
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "auth-spnego",
              "requirement": "DISABLED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "identity-provider-redirector",
              "requirement": "ALTERNATIVE",
              "priority": 25,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "flowAlias": "browser tmax policies passwordless with fido forms",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "ef8d33d5-be39-40a7-a1fa-56839817ed1f",
          "alias": "browser tmax policies passwordless with fido forms",
          "description": "Username, password, otp and other auth forms.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "auth-username-password-form",
              "requirement": "REQUIRED",
              "priority": 6,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "security-policy-authenticator",
              "requirement": "REQUIRED",
              "priority": 9,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "email-otp-authenticator",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "withdrawal-cancel-authenticator",
              "requirement": "REQUIRED",
              "priority": 11,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "password-update-alert-authenticator",
              "requirement": "REQUIRED",
              "priority": 12,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "6456f934-c378-405a-8402-96a78d7a0948",
          "alias": "browser tmax policies with fido",
          "description": "browser based authentication",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "auth-cookie",
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "auth-spnego",
              "requirement": "DISABLED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "identity-provider-redirector",
              "requirement": "ALTERNATIVE",
              "priority": 25,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "flowAlias": "passwordless with fido forms",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "3546a272-eb69-4ddf-99c3-5e3facce3e33",
          "alias": "clients",
          "description": "Base authentication for clients",
          "providerId": "client-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "client-secret",
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "client-jwt",
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "client-secret-jwt",
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "client-x509",
              "requirement": "ALTERNATIVE",
              "priority": 40,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "da21aefc-33e7-470d-89cf-e6440acd6ef6",
          "alias": "direct grant",
          "description": "OpenID Connect Resource Owner Grant",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "direct-grant-validate-username",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "direct-grant-validate-password",
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "CONDITIONAL",
              "priority": 30,
              "flowAlias": "Direct Grant - Conditional OTP",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "d9ae8256-f193-4aa6-a9e8-3d0baf68f752",
          "alias": "docker auth",
          "description": "Used by Docker clients to authenticate against the IDP",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "docker-http-basic-authenticator",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "22c67d7d-df98-4bff-907e-0152235e4eee",
          "alias": "first broker login",
          "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "review profile config",
              "authenticator": "idp-review-profile",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "REQUIRED",
              "priority": 20,
              "flowAlias": "User creation or linking",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "6b4855e1-8ace-4e01-9e14-989e99ba0579",
          "alias": "first broker login with tmax policy",
          "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "review profile config",
              "authenticator": "idp-review-profile",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "REQUIRED",
              "priority": 20,
              "flowAlias": "first broker login with tmax policy User creation or linking",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "431f414e-58f7-4bb8-b222-19539f61a6a0",
          "alias": "first broker login with tmax policy Account verification options",
          "description": "Method with which to verity the existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "flowAlias": "first broker login with tmax policy Verify Existing Account by Re-authentication",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "91a29bf9-d6ea-4db2-9c12-21db1b0caee6",
          "alias": "first broker login with tmax policy Handle Existing Account",
          "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "idp-confirm-link",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "REQUIRED",
              "priority": 20,
              "flowAlias": "first broker login with tmax policy Account verification options",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "3af7d83c-d78b-4760-a2e7-21b2c6ad9cd2",
          "alias": "first broker login with tmax policy User creation or linking",
          "description": "Flow for the existing/non-existing user alternatives",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "create unique user config",
              "authenticator": "idp-create-user-if-unique",
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "flowAlias": "first broker login with tmax policy Handle Existing Account",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "9b436750-36a6-4e59-b2c6-0429997fc8c2",
          "alias": "first broker login with tmax policy Verify Existing Account by Re-authentication",
          "description": "Reauthentication of existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "auth-password-form",
              "requirement": "REQUIRED",
              "priority": 11,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "7d6cd79d-0be7-4895-80fe-95cead16ae67",
          "alias": "forms",
          "description": "Username, password, otp and other auth forms.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "auth-username-password-form",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "DISABLED",
              "priority": 20,
              "flowAlias": "Browser - Conditional OTP",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "7e8b962f-f98f-4831-9bb4-d68a766a0d3c",
          "alias": "http challenge",
          "description": "An authentication flow based on challenge-response HTTP Authentication Schemes",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "no-cookie-redirect",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "REQUIRED",
              "priority": 20,
              "flowAlias": "Authentication Options",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "ef78e1c4-d717-4655-af93-91fc7028de34",
          "alias": "passwordless with fido forms",
          "description": "Username, password, otp and other auth forms.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "auth-username-form",
              "requirement": "REQUIRED",
              "priority": 4,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "registration-page-form",
              "requirement": "REQUIRED",
              "priority": 5,
              "flowAlias": "Authentication",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            },
            {
              "authenticator": "security-policy-authenticator",
              "requirement": "REQUIRED",
              "priority": 6,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "withdrawal-cancel-authenticator",
              "requirement": "REQUIRED",
              "priority": 7,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "password-update-alert-authenticator",
              "requirement": "REQUIRED",
              "priority": 8,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "email-otp-authenticator",
              "requirement": "REQUIRED",
              "priority": 9,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "4c26528c-5f7a-4214-aed4-f4bf2cac10ac",
          "alias": "post login for idP with tmax policies",
          "description": "browser based authentication",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": false,
          "authenticationExecutions": [
            {
              "authenticator": "auth-cookie",
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "flowAlias": "Post Login For idP With Tmax Policies",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "e75b2e99-5212-4cc1-8335-443802af6fdf",
          "alias": "registration",
          "description": "registration flow",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "registration-page-form",
              "requirement": "REQUIRED",
              "priority": 10,
              "flowAlias": "registration form",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "4820b231-7108-4491-852d-be66b1209b16",
          "alias": "registration form",
          "description": "registration form",
          "providerId": "form-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "registration-user-creation",
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "registration-profile-action",
              "requirement": "DISABLED",
              "priority": 40,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "registration-password-action",
              "requirement": "REQUIRED",
              "priority": 50,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "registration-recaptcha-action",
              "requirement": "DISABLED",
              "priority": 60,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "5d3dad12-3498-4118-947f-50bf90013220",
          "alias": "reset credentials",
          "description": "Reset credentials for a user if they forgot their password or something",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "reset-credentials-choose-user",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "reset-credential-email",
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "reset-password",
              "requirement": "REQUIRED",
              "priority": 30,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "requirement": "CONDITIONAL",
              "priority": 40,
              "flowAlias": "Reset - Conditional OTP",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "cdd32ba8-1988-454b-b5bd-727e9c6c3738",
          "alias": "saml ecp",
          "description": "SAML ECP Profile Authentication Flow",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "http-basic-authenticator",
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        }
      ],
      "authenticatorConfig": [
        {
          "id": "800dd37b-3faf-4cc5-9cf3-99a8dd3e914b",
          "alias": "create unique user config",
          "config": {
            "require.password.update.after.registration": "false"
          }
        },
        {
          "id": "4a47103c-fdc0-4783-8406-7caad9ad09c0",
          "alias": "review profile config",
          "config": {
            "update.profile.on.first.login": "missing"
          }
        }
      ],
      "requiredActions": [
        {
          "alias": "UPDATE_PASSWORD",
          "name": "Update Password",
          "providerId": "UPDATE_PASSWORD",
          "enabled": true,
          "defaultAction": false,
          "priority": 10,
          "config": {}
        },
        {
          "alias": "UPDATE_PROFILE",
          "name": "Update Profile",
          "providerId": "UPDATE_PROFILE",
          "enabled": true,
          "defaultAction": false,
          "priority": 20,
          "config": {}
        },
        {
          "alias": "VERIFY_EMAIL",
          "name": "Verify Email",
          "providerId": "VERIFY_EMAIL",
          "enabled": true,
          "defaultAction": true,
          "priority": 30,
          "config": {}
        },
        {
          "alias": "webauthn-register-passwordless",
          "name": "Webauthn Register Passwordless",
          "providerId": "webauthn-register-passwordless",
          "enabled": false,
          "defaultAction": false,
          "priority": 40,
          "config": {}
        },
        {
          "alias": "CONFIGURE_TOTP",
          "name": "Configure OTP",
          "providerId": "CONFIGURE_TOTP",
          "enabled": false,
          "defaultAction": false,
          "priority": 50,
          "config": {}
        },
        {
          "alias": "terms_and_conditions",
          "name": "Terms and Conditions",
          "providerId": "terms_and_conditions",
          "enabled": false,
          "defaultAction": false,
          "priority": 1000,
          "config": {}
        },
        {
          "alias": "update_user_locale",
          "name": "Update User Locale",
          "providerId": "update_user_locale",
          "enabled": false,
          "defaultAction": false,
          "priority": 1001,
          "config": {}
        },
        {
          "alias": "webauthn-register",
          "name": "Webauthn Register",
          "providerId": "webauthn-register",
          "enabled": false,
          "defaultAction": false,
          "priority": 1002,
          "config": {}
        },
        {
          "alias": "secret_question_config",
          "name": "Secret Question",
          "providerId": "secret_question_config",
          "enabled": false,
          "defaultAction": false,
          "priority": 1003,
          "config": {}
        }
      ],
      "browserFlow": "browser tmax policies",
      "registrationFlow": "registration",
      "directGrantFlow": "direct grant",
      "resetCredentialsFlow": "reset credentials",
      "clientAuthenticationFlow": "clients",
      "dockerAuthenticationFlow": "docker auth",
      "attributes": {
        "clientOfflineSessionMaxLifespan": "0",
        "clientSessionIdleTimeout": "0",
        "clientSessionMaxLifespan": "0",
        "clientOfflineSessionIdleTimeout": "0"
      },
      "keycloakVersion": "11.0.2",
      "userManagedAccessAllowed": false
    }