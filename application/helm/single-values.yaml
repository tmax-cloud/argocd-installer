spec:
  destination:
    # description: select between 'name' or 'server'
    type: name
    clusterInfo: cluster-name
  project: default

global:
  privateRegistry: test-registry.com
  adminUser: test@test.co.kr
  cluster: single
  clusterName: cluster-name
  clusterNamespace: cluster-namespace
  domain: singletestdomain.com

modules:
  ###calico
  calico:
    enabled: true

  ###gitlab
  gitlab:
    enabled: true
    subdomain: gitlab
      
  ### gateway-bootstrap
  gatewayBootstrap:
    enabled: true
    svc_type: LoadBalancer
    tls:
      selfsigned:
        enabled: false
      # acme로 할 경우, domain에 입력한 주소를 가지고 있어야함
      acme:
        enabled: false
        email: test@tmax.co.kr
        dns:
          type: route53
          accessKeyID: accesskey
          accessKeySecret: secretkey
          hostedZoneID: hostedzoneid
        # acme를 통한 인증서 발급의 경우, rate limit이 존재하므로 테스트를 위한 설정값이 따로 존재함
        # 자세한 내용은 https://letsencrypt.org/docs/staging-environment/#rate-limits 참조
        # staging / production 중 택1하여 기입하여야 하며, 각각 테스트용 / 운영용을 의미함
        environment: production
    certManager:
      enabled: true
      # default 300
      syncWaitTime: 300
    console:
      enabled: false
      multiCluster:
        enabled: true
      # default 0
      syncWaitTime: 0
      subdomain: console
    gateway:
      enabled: true
      # default 120
      syncWaitTime: 120
    jwtDecodeAuth:
      enabled: true
      # default 30
      syncWaitTime: 30

  ### strimzi-kafka-operator
  strimziKafka:
    enabled: true

  ### service-binding-operator
  serviceBinding:
    enabled: false

  ### hyperauth
  hyperAuth:
    enabled: false
    svcType: Ingress
    subdomain: hyperauth
    # master cluster를 위한 value, 수정 X
    storageClass: default
    # do not edit tmaxClientSecret!
    tmaxClientSecret: tmax_client_secret

  ### efk
  efk:
    enabled: false
    es:
      version: 7.2.1
      limitMemory: 8Gi
      requestMemory: 5Gi
      jvmHeap: "-Xms4g -Xmx4g"
      volumeSize: 50Gi
    busyBox:
      version: 1.32.0
    kibana:
      version: 7.2.0
      svcType: ClusterIP
      subdomain: kibana
    gatekeeper:
      version: 10.0.0
    fluentd:
      version: v1.4.2-debian-elasticsearch-1.1

  ### argocd
  argocd:
    enabled: false
    subdomain: argocd
    dex:
      replicas: 1
    repoServer:
      replicas: 1
    redis:
      replicas: 1
    argocdServer:
      replicas: 1
    controller:
      replicas: 1
    ingress:
      enableTraefik: true
      secretName:
      
  ### opensearch
  opensearch:
    enabled: true
    os:
      version: 1.2.3
      limitMemory: 8Gi
      requestMemory: 5Gi
      jvmHeap: "-Xms4g -Xmx4g"
      volumeSize: 50Gi
    busyBox:
      version: 1.32.0
    dashboard:
      version: 1.2.0
      svcType: ClusterIP
      subdomain: opensearch-dashboard
    fluentd:
      version: fluentd-v1.4.2-debian-elasticsearch-1.1
      # master cluster를 위한 value, 수정 X
      storageClass: default


  ### prometheus
  prometheus:
    enabled: true
    versions:
      prometheus: v2.30.3
      cmReload: v0.0.1
      cmReloader: v0.51.2
      operator: v0.51.2
      alertManager: v0.23.0
      kubeRbacProxy: v0.11.0
      kubeStateMetrics: v2.2.3
      nodeExporter: v1.2.2
      adapter: v0.9.1
    pvcSize: 10Gi

  ### grafana-operator
  grafanaOperator:
    enabled: true
    pvcSize: 10Gi
    rbacProxy:
        version: v0.8.0
        imageRepo: gcr.io/kubebuilder/kube-rbac-proxy
    operator:
        version: v0.0.9
        imageRepo: tmaxcloudck/grafana-operator
    grafana:
        version: 8.2.2
        imageRepo: docker.io/grafana/grafana
        initImageRepo: quay.io/grafana-operator/grafana_plugins_init
        initImageVersion: 0.0.5
    subdomain: grafana

  ### service-mesh
  serviceMesh:
    ### istio
    istio:
      enabled: true

    ### jaeger
    jaeger:
      enabled: true
      subdomain: jaeger

    ### kiali
    kiali:
      enabled: true
      subdomain: kiali

  ### cluster-api
  capi:
    enabled: false
    providers:
      aws:
        enabled: false
        # description: ...
        credentials: "credential"
      vsphere:
        enabled: false
        credentials:
          username: "user"
          password: "password"

  ### template service broker
  tsb:
    enabled: false
    version: 0.1.4
    clusterTsb:
      version: 0.1.4
    templateOperator:
      version: 0.2.7

  ### catalog controller
  catalogController:
    enabled: false

  ### helm-apiserver
  helmApiserver:
    enabled: false
    version: 0.0.1
    subdomain: helm
    # default로 주는 경우 default storage class를 사용
    # default를 사용하지 않고 싶은 경우에는 storage class이름을 기입
    storageClass: default
    # 지정 가능: fatal(0), error(1), warn(2), info(3), debug(4), trace(5)
    logLevel: error
  
  ### hypercloud
  hyperCloud:
    enabled: false
    # description: 'single' or 'multi'
    mode: multi
    kafka:
      enabled: false
    # master cluster를 위한 value, 수정 X
    storageClass: default
    
    # multi-operator의 경우, info, debug, error 기입 가능(대소문자 유의)
    multiOperator:
      logLevel: info
    # single-operator의 경우, info, debug, error 기입 가능(대소문자 유의)
    singleOperator:
      logLevel: info
    # hypercloud api server의 경우, TRACE, DEBUG, INFO, WARN, ERROR, FATAL 기입 가능(대소문자 유의)
    apiServer:
      logLevel: INFO
    # timescaledb.<테이블 이름>.chunk : 청크 테이블이 생성되는 시간 단위
    # timescaledb.<테이블 이름>.retention : 청크 테이블 보관 기간
    timescaledb:
      # timescaledb의 경우, DEBUG5, DEBUG4, DEBUG3, DEBUG2, DEBUG1, INFO, NOTICE, WARNING, ERROR, LOG, FATAL, PANIC 기입 가능(대소문자 유의)
      logLevel: WARNING
      audit:
        chunk: "7 days"
        retention: "1 years"
      event:
        chunk: "1 days"
        retention: "1 months"
      metering_hour:
        chunk: "1 days"
        retention: "1 months"
      metering_day:
        chunk: "1 months"
        retention: "1 years"
      metering_month:
        chunk: "1 years"
        retention: "1 years"
      metering_year:
        chunk: "1 years"
        retention: "10 years"

  ### hyperregistry
  hyperregistry:
    enabled: true
    core:
      subdomain: hyperregistry
    notary:
      subdomain: hyperregistry-notary
    storageClass: nfs
    storageClassDatabase: nfs

  ### tekton pipeline
  tektonPipeline:
    enabled: true
    #namespace: tekton-pipelines

  ### tekton trigger
  tektonTrigger:
    enabled: true

  ### cicd operator
  cicd:
    enabled: true
    subdomain: cicd-webhook

  ### redis-operator
  redis:
    enabled: true

  ### image validating webhook
  imageValidatingWebhook:
    enabled: false

  ### ai-devops
  aiDevops:
    enabled: false
    namespace: "kubeflow"
    knativeNamespace: "knative-serving"
    notebookSvcType: "Ingress"
  job:
      imagePullSecrets: []
#      imagePullSecrets:
#        - name: regcred

  ### nfs-subdir-external-provisioner
  nfs:
    enabled: true
    # nfs provisioner가 사용할 nfs server, ex: 192.168.7.16
    server: 192.168.7.16
    # nfs provisioner가 사용할 nfs server의 path, ex: /mnt/nfs-shared-dir
    path: /nfs-storage

  ### ceph-csi-cephfs
  cephfs:
    enabled: true
    # 사용 위해 ceph-csi namespace에 configmap(csi-config-map), secret(csi-cephfs-secret) 생성 필요
    # csi-config-map 에서 명시한 clusterID(fsid)
    clusterId: 50611be6-33b3-11eb-a5cb-0894ef32cba4

  ### ceph-csi-rbd
  rbd:
    enabled: true
    # 사용 위해 ceph-csi namespace에 configmap(csi-config-map), secret(csi-rbd-secret) 생성 필요
    # csi-config-map 에서 명시한 clusterID(fsid)
    clusterId: 50611be6-33b3-11eb-a5cb-0894ef32cba4